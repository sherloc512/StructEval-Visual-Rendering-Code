{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Viz with matplotlib Series 11: Histogram\n",
    "\n",
    "## Reference\n",
    "- Histogram\n",
    "    <https://en.wikipedia.org/wiki/Histogram>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Histogram"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A histogram is an accurate representation of the distribution of numerical data. It differs from a bar graph, in the sense that a bar graph relates two variables, but a histogram relates only one. To construct a histogram, the first step is to \"bin\" (or \"bucket\") the range of values-that is, divide the entire range of values into a series of intervalsâ€”and then count how many values fall into each interval. The bins are usually specified as consecutive, non-overlapping intervals of a variable. The bins (intervals) must be adjacent, and are often (but are not required to be) of equal size."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### When to use it ?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Estimating the probability distribution of a continuous variable (quantitative variable).\n",
    "- Organizing large amounts of data, and producing a visualization quickly, using a single dimension."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "tickets = []\n",
    "for i in range(1, 1931):\n",
    "    ticket = 'T'+str(i)\n",
    "    tickets.append(ticket)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "vol = [1] * 140 + [2] * 120 + [3] * 230 + [4] * 200 + [5] * 230 + \\\n",
    "[6] * 180 + [7] * 160 + [8] * 170 + [9] * 130 + [10] * 100 + [11] * 60 + \\\n",
    "[12] * 63 + [13] * 42 + [14] * 31 + [15] * 20 + [16] * 12 + [17] * 9 + [18] * 12 + [19] * 9 + [20] * 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame({'TicketID': tickets,\n",
    "                   'Volumes': vol},\n",
    "                  columns=['TicketID', 'Volumes'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TicketID</th>\n",
       "      <th>Volumes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>T1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>T2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>T3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>T4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>T5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  TicketID  Volumes\n",
       "0       T1        1\n",
       "1       T2        1\n",
       "2       T3        1\n",
       "3       T4        1\n",
       "4       T5        1"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Volumes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1930.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>6.434197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.883086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85%</th>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>20.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Volumes\n",
       "count  1930.000000\n",
       "mean      6.434197\n",
       "std       3.883086\n",
       "min       1.000000\n",
       "25%       3.000000\n",
       "50%       6.000000\n",
       "75%       9.000000\n",
       "85%      10.000000\n",
       "max      20.000000"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe(percentiles=[0.25, 0.5, 0.75, 0.85])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Basic histogram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1147be240>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(9, 6))\n",
    "\n",
    "plt.hist(df['Volumes'], bins=6, density=True)\n",
    "plt.xlim(left=0, right=21)\n",
    "plt.xticks(np.arange(21))\n",
    "\n",
    "plt.grid(alpha=0.2)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This plot describes that among 1930 tickets, 11% tickets contain less than 5 products; less than 1% tickets contain less than 21 products but more than 16 products. However, if we want to the percentage of tickets that contains less than or egale to 10 products, this basic histogram cannot satisfy our need in one second. In the following cumulative histogram, we can find the answer."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cumulative histogram\n",
    "A cumulative histogram is a mapping that counts the cumulative number of observations in all of the bins up to the specified bin."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x114858550>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(9, 6))\n",
    "\n",
    "plt.hist(df['Volumes'], bins=6, density=True, cumulative=True, histtype='step', linewidth=2)\n",
    "plt.xlim(left=0, right=21)\n",
    "plt.xticks(np.arange(21))\n",
    "\n",
    "plt.grid(alpha=0.3)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Considering the same question as above: what the percentage of tickets that contain less than or egale to 10 products? According to this cumulative histogram, the answer is obvious: nearly 85% tickets contain less than or egale to 10 products."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
