#!/usr/bin/env python
# Extracted from Stem-Leaf%20Plots%20in%20Python%20A%20Visual%20Representation%20of%20Data.md

import matplotlib.pyplot as plt
import numpy as np
import os

# Create directory for saved plots
os.makedirs('plots', exist_ok=True)


# Code Block 1
import matplotlib.pyplot as plt

def stem_leaf_plot(data):
    # Sort the data
    sorted_data = sorted(data)
    
    # Extract stems and leaves
    stems = [str(x)[:-1] for x in sorted_data]
    leaves = [str(x)[-1] for x in sorted_data]
    
    # Create a dictionary to store leaves for each stem
    stem_leaf_dict = {}
    for stem, leaf in zip(stems, leaves):
        if stem in stem_leaf_dict:
            stem_leaf_dict[stem].append(leaf)
        else:
            stem_leaf_dict[stem] = [leaf]
    
    # Plot the stem-leaf plot
    fig, ax = plt.subplots(figsize=(10, 6))
    for stem, leaves in stem_leaf_dict.items():
        ax.text(0, int(stem), f"{stem} | {''.join(leaves)}")
    
    ax.set_ylim(min(map(int, stems))-1, max(map(int, stems))+1)
    ax.set_axis_off()
    plt.title("Stem-Leaf Plot")
    plt.savefig("plots/Stem-Leaf%20Plots%20in%20Python%20A%20Visual%20Representation%20of%20Data_extracted_plot_1.png", dpi=300, bbox_inches="tight")
plt.close()

# Example data
data = [23, 29, 20, 32, 27, 25, 28, 31, 24, 26, 22, 30]
stem_leaf_plot(data)


# Code Block 2
def create_stem_leaf(data):
    # Sort the data
    sorted_data = sorted(data)
    
    # Create stems and leaves
    stems = [str(x)[:-1] for x in sorted_data]
    leaves = [str(x)[-1] for x in sorted_data]
    
    # Create a dictionary to store leaves for each stem
    stem_leaf_dict = {}
    for stem, leaf in zip(stems, leaves):
        if stem in stem_leaf_dict:
            stem_leaf_dict[stem].append(leaf)
        else:
            stem_leaf_dict[stem] = [leaf]
    
    # Print the stem-leaf plot
    for stem, leaves in stem_leaf_dict.items():
        print(f"{stem} | {''.join(leaves)}")

# Example data
data = [23, 29, 20, 32, 27, 25, 28, 31, 24, 26, 22, 30]
create_stem_leaf(data)


# Code Block 3
def basic_stem_leaf(data):
    # Sort the data
    sorted_data = sorted(data)
    
    # Create stems and leaves
    stems = [str(x)[:-1] for x in sorted_data]
    leaves = [str(x)[-1] for x in sorted_data]
    
    # Print the stem-leaf plot
    unique_stems = sorted(set(stems))
    for stem in unique_stems:
        print(f"{stem} | ", end="")
        for i, s in enumerate(stems):
            if s == stem:
                print(leaves[i], end="")
        print()

# Example data
data = [23, 29, 20, 32, 27, 25, 28, 31, 24, 26, 22, 30]
basic_stem_leaf(data)


# Code Block 4
import numpy as np

def interpret_stem_leaf(data):
    # Calculate basic statistics
    median = np.median(data)
    mode = max(set(data), key=data.count)
    data_range = max(data) - min(data)
    
    print(f"Median: {median}")
    print(f"Mode: {mode}")
    print(f"Range: {data_range}")
    
    # Create and print the stem-leaf plot
    basic_stem_leaf(data)

# Example data
data = [23, 29, 20, 32, 27, 25, 28, 31, 24, 26, 22, 30, 20, 28]
interpret_stem_leaf(data)


# Code Block 5
def back_to_back_stem_leaf(data1, data2):
    # Combine and sort both datasets
    all_data = sorted(data1 + data2)
    
    # Create stems and leaves
    stems = [str(x)[:-1] for x in all_data]
    leaves1 = [str(x)[-1] if x in data1 else '' for x in all_data]
    leaves2 = [str(x)[-1] if x in data2 else '' for x in all_data]
    
    # Print the back-to-back stem-leaf plot
    unique_stems = sorted(set(stems), reverse=True)
    for stem in unique_stems:
        left_leaves = ''.join(leaves1[i] for i, s in enumerate(stems) if s == stem)
        right_leaves = ''.join(leaves2[i] for i, s in enumerate(stems) if s == stem)
        print(f"{left_leaves:>10} | {stem} | {right_leaves}")

# Example data
data1 = [23, 29, 20, 32, 27, 25, 28]
data2 = [31, 24, 26, 22, 30, 33, 35]
back_to_back_stem_leaf(data1, data2)


# Code Block 6
def large_dataset_stem_leaf(data, stem_interval=10):
    # Sort the data
    sorted_data = sorted(data)
    
    # Create stems and leaves
    stems = [str(x // stem_interval) for x in sorted_data]
    leaves = [str(x % stem_interval) for x in sorted_data]
    
    # Print the stem-leaf plot
    unique_stems = sorted(set(stems))
    for stem in unique_stems:
        print(f"{int(stem) * stem_interval:3d} | ", end="")
        for i, s in enumerate(stems):
            if s == stem:
                print(f"{leaves[i]:2s}", end=" ")
        print()

# Example data (larger dataset)
import random
data = [random.randint(0, 199) for _ in range(50)]
large_dataset_stem_leaf(data)


# Code Block 7
import numpy as np

def stem_leaf_with_outliers(data):
    # Calculate Q1, Q3, and IQR
    q1, q3 = np.percentile(data, [25, 75])
    iqr = q3 - q1
    lower_bound = q1 - 1.5 * iqr
    upper_bound = q3 + 1.5 * iqr
    
    # Sort the data
    sorted_data = sorted(data)
    
    # Create stems and leaves
    stems = [str(x)[:-1] for x in sorted_data]
    leaves = [str(x)[-1] for x in sorted_data]
    
    # Print the stem-leaf plot with outlier detection
    unique_stems = sorted(set(stems))
    for stem in unique_stems:
        print(f"{stem} | ", end="")
        for i, s in enumerate(stems):
            if s == stem:
                if lower_bound <= sorted_data[i] <= upper_bound:
                    print(leaves[i], end="")
                else:
                    print(f"*{leaves[i]}*", end="")  # Mark outliers with asterisks
        print()

# Example data with outliers
data = [23, 29, 20, 32, 27, 25, 28, 31, 24, 26, 22, 30, 15, 40]
stem_leaf_with_outliers(data)


# Code Block 8
import matplotlib.pyplot as plt
import numpy as np

def colored_stem_leaf(data):
    # Sort the data
    sorted_data = sorted(data)
    
    # Create stems and leaves
    stems = [str(x)[:-1] for x in sorted_data]
    leaves = [str(x)[-1] for x in sorted_data]
    
    # Create a dictionary to store leaves for each stem
    stem_leaf_dict = {}
    for stem, leaf in zip(stems, leaves):
        if stem in stem_leaf_dict:
            stem_leaf_dict[stem].append(leaf)
        else:
            stem_leaf_dict[stem] = [leaf]
    
    # Plot the colored stem-leaf plot
    fig, ax = plt.subplots(figsize=(10, 6))
    colors = plt.cm.viridis(np.linspace(0, 1, len(stem_leaf_dict)))
    
    for i, (stem, leaves) in enumerate(stem_leaf_dict.items()):
        ax.text(0, int(stem), f"{stem} | {''.join(leaves)}", color=colors[i])
    
    ax.set_ylim(min(map(int, stems))-1, max(map(int, stems))+1)
    ax.set_axis_off()
    plt.title("Colored Stem-Leaf Plot")
    plt.savefig("plots/Stem-Leaf%20Plots%20in%20Python%20A%20Visual%20Representation%20of%20Data_extracted_plot_8.png", dpi=300, bbox_inches="tight")
plt.close()

# Example data
data = [23, 29, 20, 32, 27, 25, 28, 31, 24, 26, 22, 30]
colored_stem_leaf(data)


# Code Block 9
def student_heights_stem_leaf(heights):
    # Sort the heights
    sorted_heights = sorted(heights)
    
    # Create stems and leaves
    stems = [str(x)[:-1] for x in sorted_heights]
    leaves = [str(x)[-1] for x in sorted_heights]
    
    # Print the stem-leaf plot
    unique_stems = sorted(set(stems))
    for stem in unique_stems:
        print(f"{stem} | ", end="")
        for i, s in enumerate(stems):
            if s == stem:
                print(leaves[i], end="")
        print()

# Example student heights (in cm)
heights = [158, 162, 165, 170, 171, 173, 175, 176, 178, 180, 182, 185]
print("Student Heights (cm) Stem-Leaf Plot:")
student_heights_stem_leaf(heights)


# Code Block 10
import random

def temperature_stem_leaf(temperatures):
    # Sort the temperatures
    sorted_temps = sorted(temperatures)
    
    # Create stems and leaves
    stems = [str(x)[:-1] for x in sorted_temps]
    leaves = [str(x)[-1] for x in sorted_temps]
    
    # Print the stem-leaf plot
    unique_stems = sorted(set(stems))
    for stem in unique_stems:
        print(f"{stem} | ", end="")
        for i, s in enumerate(stems):
            if s == stem:
                print(leaves[i], end="")
        print()

# Generate random temperature data for a month (in Celsius)
temperatures = [random.randint(15, 35) for _ in range(30)]
print("Daily Temperature Readings (Â°C) Stem-Leaf Plot:")
temperature_stem_leaf(temperatures)


# Code Block 11
import numpy as np

def stem_leaf_with_stats(data):
    # Calculate summary statistics
    mean = np.mean(data)
    median = np.median(data)
    mode = max(set(data), key=data.count)
    
    # Create and print the stem-leaf plot
    basic_stem_leaf(data)
    
    # Print summary statistics
    print("\nSummary Statistics:")
    print(f"Mean: {mean:.2f}")
    print(f"Median: {median}")
    print(f"Mode: {mode}")

# Example data
data = [23, 29, 20, 32, 27, 25, 28, 31, 24, 26, 22, 30, 20, 28]
stem_leaf_with_stats(data)


# Code Block 12
import ipywidgets as widgets
from IPython.display import display

def interactive_stem_leaf(data):
    def update_plot(stem_width):
        stems = [str(x // stem_width) for x in sorted(data)]
        leaves = [str(x % stem_width) for x in sorted(data)]
        
        unique_stems = sorted(set(stems))
        output = []
        for stem in unique_stems:
            stem_line = f"{int(stem) * stem_width:3d} | "
            stem_line += " ".join(leaves[i] for i, s in enumerate(stems) if s == stem)
            output.append(stem_line)
        
        plot_output.value = "\n".join(output)
    
    stem_width_slider = widgets.IntSlider(min=1, max=20, step=1, value=10, description="Stem Width:")
    plot_output = widgets.Textarea(layout={'width': '400px', 'height': '300px'})
    
    widgets.interactive(update_plot, stem_width=stem_width_slider)
    display(stem_width_slider, plot_output)

# Example data
data = [random.randint(0, 199) for _ in range(50)]
interactive_stem_leaf(data)


# Code Block 13
import matplotlib.pyplot as plt
import numpy as np

def compare_stem_leaf_histogram(data):
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
    
    # Stem-leaf plot
    sorted_data = sorted(data)
    stems = [str(x)[:-1] for x in sorted_data]
    leaves = [str(x)[-1] for x in sorted_data]
    
    for stem in set(stems):
        ax1.text(0, int(stem), f"{stem} | {''.join([l for s, l in zip(stems, leaves) if s == stem])}")
    
    ax1.set_ylim(min(map(int, stems))-1, max(map(int, stems))+1)
    ax1.set_title("Stem-Leaf Plot")
    ax1.set_axis_off()
    
    # Histogram
    ax2.hist(data, bins='auto', edgecolor='black')
    ax2.set_title("Histogram")
    ax2.set_xlabel("Value")
    ax2.set_ylabel("Frequency")
    
    plt.tight_layout()
    plt.savefig("plots/Stem-Leaf%20Plots%20in%20Python%20A%20Visual%20Representation%20of%20Data_extracted_plot_13.png", dpi=300, bbox_inches="tight")
plt.close()

# Example data
data = [23, 29, 20, 32, 27, 25, 28, 31, 24, 26, 22, 30, 20, 28]
compare_stem_leaf_histogram(data)


# Code Block 14
def stem_leaf_limitations(data):
    if len(data) > 100:
        print("Warning: Large dataset. Consider using a histogram instead.")
        return
    
    range_of_data = max(data) - min(data)
    if range_of_data > 100:
        print("Warning: Wide range of values. Consider using larger stem intervals.")
    
    # Proceed with stem-leaf plot
    basic_stem_leaf(data)

# Example data
small_data = [23, 29, 20, 32, 27, 25, 28, 31, 24, 26, 22, 30]
large_data = list(range(1, 200))

print("Small dataset:")
stem_leaf_limitations(small_data)

print("\nLarge dataset:")
stem_leaf_limitations(large_data)


print("\nPlots generated:")
for i, plot_file in enumerate(sorted(glob.glob('plots/*.png'))):
    print(f"{i+1}. {plot_file}")
