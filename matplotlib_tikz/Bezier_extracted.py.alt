#!/usr/bin/env python
# Extracted from Bezier.html

import matplotlib.pyplot as plt
import numpy as np
import os

# Create directory for saved plots
os.makedirs('plots', exist_ok=True)


# Code Block 1
import numpy as np
from scipy.special import comb
import matplotlib.pyplot as plt


# Code Block 2
# Use this to click points for Bezier curve
# Might have to run this block twice. (?)
%matplotlib osx
plt.ion()


# Code Block 3
def B(i, N, t):
    val = comb(N,i) * t**i * (1.-t)**(N-i)
    return val


# Code Block 4
N = 7
for i in range(N+1):
    plt.plot(tt, B(i, N, tt));


# Code Block 5
def P(t, X):
    '''
     xx = P(t, X)
     
     Evaluates a Bezier curve for the points in X.
     
     Inputs:
      X is a list (or array) or 2D coords
      t is a number (or list of numbers) in [0,1] where you want to
        evaluate the Bezier curve
      
     Output:
      xx is the set of 2D points along the Bezier curve
    '''
    X = np.array(X)
    N,d = np.shape(X)   # Number of points, Dimension of points
    N = N - 1
    xx = np.zeros((len(t), d))
    
    for i in range(N+1):
        xx += np.outer(B(i, N, t), X[i])
    
    return xx


# Code Block 6
plt.figure(2, figsize=[8,8])
plt.clf()

clickable = False

if clickable:
    plt.plot([0,1],[0,1],'w.')
    plt.axis('equal');
    plt.draw()
    c = plt.ginput(20, mouse_stop=2) # on macbook, alt-click to stop
    plt.draw()
else:
    c = [(0.09374999999999989, 0.15297619047619054),
         (0.549107142857143, 0.1648809523809524),
         (0.7083333333333335, 0.6142857142857144),
         (0.5282738095238095, 0.8940476190476193),
         (0.24404761904761907, 0.8776785714285716),
         (0.15327380952380942, 0.6321428571428573),
         (0.580357142857143, 0.08303571428571432),
         (0.8839285714285716, 0.28988095238095246)]
    
X = np.array(c)

tt = np.linspace(0, 1, 200)
xx = P(tt, X)

plt.plot(xx[:,0], xx[:,1])
plt.plot(X[:,0], X[:,1], 'ro');


# Code Block 7
def DrawBezier(p, n):

    x1 = p[0]
    y1 = p[1]
    x2 = p[2]
    y2 = p[3]
    x3 = p[4]
    y3 = p[5]
    x4 = p[6]
    y4 = p[7]
        
    t = np.linspace(0,1,n)
    
    xx = P(t, np.reshape(p, (4,2)))
    
    plt.plot([x1, x4], [y1, y4], 'ro') # knot point
    plt.plot([x1, x2], [y1, y2], 'r-') # tangent
    plt.plot([x3, x4], [y3, y4], 'r-') # tangent
    plt.plot(xx[:,0], xx[:,1], '-')                # curve


# Code Block 8
plt.figure(3, figsize=[8,8])
plt.clf()
for segment in p:
    DrawBezier(segment, 100)
plt.axis('equal');


# Code Block 9
plt.figure(3, figsize=[8,8])
plt.clf()
for segment in p:
    DrawBezier(segment, 100)
plt.axis('equal');


# Code Block 10
plt.figure(3, figsize=[8,8])
plt.clf()
for segment in p:
    DrawBezier(segment, 100)
idx = 5
plt.plot([p[idx][0], p[idx][-2]], [p[idx][1], p[idx][-1]], 'ko')
plt.axis('equal');


# Code Block 11
plt.figure(4, figsize=[8,8])
plt.clf()
for segment in p:
    DrawBezier(segment, 100)
idx = 5
plt.plot([p[idx][0], p[idx][-2]], [p[idx][1], p[idx][-1]], 'ko')
plt.axis('equal');


import glob
print("\nPlots generated:")
plot_files = glob.glob('plots/*.png')
for i, plot_file in enumerate(sorted(plot_files)):
    print(f"{i+1}. {plot_file}")
